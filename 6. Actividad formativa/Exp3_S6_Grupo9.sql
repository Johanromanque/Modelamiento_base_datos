-- ===========================================================
-- ELIMINACIÓN PREVIA DE TABLAS (en orden inverso a dependencias)
-- ===========================================================
DROP TABLE MEDICAMENTO CASCADE CONSTRAINTS;
DROP TABLE DOSIS CASCADE CONSTRAINTS;
DROP TABLE TIPO_MEDICAMENTO CASCADE CONSTRAINTS;
DROP TABLE PAGO CASCADE CONSTRAINTS;
DROP TABLE RECETA CASCADE CONSTRAINTS;       -- Depende de PACIENTE, MEDICO, DIGITADOR, DIAGNOSTICO, TIPO_RECETA
DROP TABLE PACIENTE CASCADE CONSTRAINTS;     -- Depende de COMUNA
DROP TABLE MEDICO CASCADE CONSTRAINTS;       -- Depende de ESPECIALIDAD
DROP TABLE DIGITADOR CASCADE CONSTRAINTS;    -- Independiente
DROP TABLE TIPO_RECETA CASCADE CONSTRAINTS;  -- Catálogo
DROP TABLE DIAGNOSTICO CASCADE CONSTRAINTS;  -- Catálogo
DROP TABLE BANCO CASCADE CONSTRAINTS;        -- Catálogo
DROP TABLE COMUNA CASCADE CONSTRAINTS;       -- Catálogo
DROP TABLE ESPECIALIDAD CASCADE CONSTRAINTS; -- Catálogo


-- ===========================================================
-- TABLA: MEDICAMENTO
-- ===========================================================
-- Extracto del caso: “Los medicamentos deben tener un identificador único.”
CREATE TABLE MEDICAMENTO (
  cod_medicamento     NUMBER(7)   GENERATED ALWAYS AS IDENTITY,
  nombre              VARCHAR(40) NOT NULL,
  stock_disponible    NUMBER(5)   DEFAULT 0 NOT NULL,
  precio_unidad       NUMBER(7)   DEFAULT 1000 NOT NULL, -- Se usa en Caso 2
  via_administra      VARCHAR(50) NOT NULL,
  id_tipo_medicamento NUMBER(3)   NOT NULL
);

ALTER TABLE MEDICAMENTO
  ADD CONSTRAINT medicamento_pk 
  PRIMARY KEY (cod_medicamento);


-- ===========================================================
-- TABLA: TIPO_MEDICAMENTO
-- ===========================================================
-- Extracto del caso: “Los medicamentos pueden ser de diferentes tipos (ej: genéricos o de marca).”
CREATE TABLE TIPO_MEDICAMENTO (
  cod_tipo_medicamento NUMBER(3) NOT NULL, 
  descripcion          VARCHAR2(25) NOT NULL              
);

ALTER TABLE TIPO_MEDICAMENTO
  ADD CONSTRAINT tipo_medicamento_pk 
  PRIMARY KEY (cod_tipo_medicamento);

ALTER TABLE TIPO_MEDICAMENTO
  ADD CONSTRAINT tipo_medicamento_descripcion_un 
  UNIQUE (descripcion);

-- Relación: MEDICAMENTO → TIPO_MEDICAMENTO
ALTER TABLE MEDICAMENTO
  ADD CONSTRAINT medicamento_tipo_med_fk 
  FOREIGN KEY (id_tipo_medicamento)
  REFERENCES TIPO_MEDICAMENTO (cod_tipo_medicamento);

-- Validación: stock no puede ser negativo
ALTER TABLE MEDICAMENTO
  ADD CONSTRAINT medicamento_ck_stock_no_neg 
  CHECK (stock_disponible >= 0);

-- Evitar duplicados de nombre dentro del mismo tipo
ALTER TABLE MEDICAMENTO
  ADD CONSTRAINT medicamento_un_nombre_tipo 
  UNIQUE (nombre, id_tipo_medicamento);


-- ===========================================================
-- TABLA: DOSIS
-- ===========================================================
-- Extracto del caso: “Cada receta puede contener uno o más medicamentos asociados.”
CREATE TABLE DOSIS (
  id_medicamento        NUMBER(7)   NOT NULL,           -- Referencia a MEDICAMENTO
  unidades_medicamento  NUMBER(3)   DEFAULT 1 NOT NULL, -- Cantidad por toma
  descripcion_dosis     VARCHAR2(50) NOT NULL,          -- Pauta (ej: “cada 8 horas”)
  dias_tratamiento      NUMBER(3)   NOT NULL            -- Duración del tratamiento
);

ALTER TABLE DOSIS
  ADD CONSTRAINT dosis_pk 
  PRIMARY KEY (id_medicamento, descripcion_dosis, dias_tratamiento);

ALTER TABLE DOSIS
  ADD CONSTRAINT dosis_medicamento_fk 
  FOREIGN KEY (id_medicamento)
  REFERENCES MEDICAMENTO (cod_medicamento);

ALTER TABLE DOSIS
  ADD CONSTRAINT dosis_ck_valores_positivos
  CHECK (unidades_medicamento > 0 AND dias_tratamiento > 0);


-- ===========================================================
-- ALTER TABLES EVOLUTIVOS
-- ===========================================================
-- Agregar concentración al medicamento
ALTER TABLE MEDICAMENTO
  ADD concentracion_mg NUMBER(5) DEFAULT 500 NOT NULL;

-- Validar rango de precios
ALTER TABLE MEDICAMENTO
  ADD CONSTRAINT medicamento_ck_precio
  CHECK (precio_unidad BETWEEN 1000 AND 2000000);


-- ===========================================================
-- TABLA: COMUNA (catálogo)
-- ===========================================================
CREATE TABLE COMUNA (
  id_comuna NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1101 INCREMENT BY 1) PRIMARY KEY,
  nombre    VARCHAR2(100) NOT NULL,
  region    VARCHAR2(100)
);


-- ===========================================================
-- TABLA: PACIENTE
-- ===========================================================
CREATE TABLE PACIENTE (
  rut_pac    VARCHAR2(25) PRIMARY KEY,
  dv_pac     CHAR(1) NOT NULL,
  pnombre    VARCHAR2(50),
  snombre    VARCHAR2(50),
  papellido  VARCHAR2(50),
  edad       NUMBER, -- Será reemplazada en Caso 2
  telefono   VARCHAR2(20),
  calle      VARCHAR2(100),
  numeracion VARCHAR2(20),
  ciudad     VARCHAR2(100),
  region     VARCHAR2(100),
  id_comuna  NUMBER
);

ALTER TABLE PACIENTE
  ADD CONSTRAINT paciente_dv_chk 
  CHECK (UPPER(dv_pac) IN ('0','1','2','3','4','5','6','7','8','9','K'));

ALTER TABLE PACIENTE
  ADD CONSTRAINT paciente_comuna_fk 
  FOREIGN KEY (id_comuna)
  REFERENCES COMUNA(id_comuna);


-- ===========================================================
-- TABLA: ESPECIALIDAD (catálogo)
-- ===========================================================
CREATE TABLE ESPECIALIDAD (
  id_especialidad NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre          VARCHAR2(100) NOT NULL
);


-- ===========================================================
-- TABLA: MEDICO
-- ===========================================================
CREATE TABLE MEDICO (
  rut_med    VARCHAR2(25) PRIMARY KEY,
  dv_med     CHAR(1) NOT NULL,
  pnombre    VARCHAR2(50),
  snombre    VARCHAR2(50),
  papellido  VARCHAR2(50),
  sapellido  VARCHAR2(50),
  telefono   VARCHAR2(20) NOT NULL,
  id_especialidad NUMBER
);

ALTER TABLE MEDICO
  ADD CONSTRAINT medico_dv_chk 
  CHECK (UPPER(dv_med) IN ('0','1','2','3','4','5','6','7','8','9','K'));

ALTER TABLE MEDICO
  ADD CONSTRAINT medico_telefono_un 
  UNIQUE (telefono);

ALTER TABLE MEDICO
  ADD CONSTRAINT medico_especialidad_fk 
  FOREIGN KEY (id_especialidad)
  REFERENCES ESPECIALIDAD(id_especialidad);


-- ===========================================================
-- TABLA: DIAGNOSTICO (catálogo)
-- ===========================================================
CREATE TABLE DIAGNOSTICO (
  cod_diagnostico NUMBER PRIMARY KEY,
  nombre          VARCHAR2(200) NOT NULL
);


-- ===========================================================
-- TABLA: TIPO_RECETA (catálogo)
-- ===========================================================
CREATE TABLE TIPO_RECETA (
  id_tipo_receta NUMBER PRIMARY KEY,
  nombre         VARCHAR2(50) NOT NULL
);


-- ===========================================================
-- TABLA: DIGITADOR
-- ===========================================================
CREATE TABLE DIGITADOR (
  id_digitador NUMBER PRIMARY KEY,
  dv_digitador CHAR(1) NOT NULL,
  pnombre      VARCHAR2(50),
  papellido    VARCHAR2(50)
);

ALTER TABLE DIGITADOR
  ADD CONSTRAINT digitador_dv_chk 
  CHECK (UPPER(dv_digitador) IN ('0','1','2','3','4','5','6','7','8','9','K'));


-- ===========================================================
-- TABLA: RECETA
-- ===========================================================
CREATE TABLE RECETA (
  cod_receta         NUMBER PRIMARY KEY,
  observaciones      VARCHAR2(500),
  fecha_emision      DATE NOT NULL,
  fecha_vencimiento  DATE,
  id_digitador       NUMBER NOT NULL,
  pac_rut            VARCHAR2(25) NOT NULL,
  id_diagnostico     NUMBER NOT NULL,
  med_rut            VARCHAR2(25),
  id_tipo_receta     NUMBER
);

ALTER TABLE RECETA
  ADD CONSTRAINT receta_digitador_fk 
  FOREIGN KEY (id_digitador) 
  REFERENCES DIGITADOR(id_digitador);

ALTER TABLE RECETA
  ADD CONSTRAINT receta_paciente_fk 
  FOREIGN KEY (pac_rut) 
  REFERENCES PACIENTE(rut_pac);

ALTER TABLE RECETA
  ADD CONSTRAINT receta_diagnostico_fk 
  FOREIGN KEY (id_diagnostico) 
  REFERENCES DIAGNOSTICO(cod_diagnostico);

ALTER TABLE RECETA
  ADD CONSTRAINT receta_medico_fk 
  FOREIGN KEY (med_rut) 
  REFERENCES MEDICO(rut_med);

ALTER TABLE RECETA
  ADD CONSTRAINT receta_tipo_fk 
  FOREIGN KEY (id_tipo_receta) 
  REFERENCES TIPO_RECETA(id_tipo_receta);


-- ===========================================================
-- TABLA: BANCO (catálogo)
-- ===========================================================
CREATE TABLE BANCO (
  cod_banco NUMBER PRIMARY KEY,
  nombre    VARCHAR2(100) NOT NULL
);


-- ===========================================================
-- TABLA: PAGO
-- ===========================================================
CREATE TABLE PAGO (
  cod_boleta   NUMBER PRIMARY KEY,
  fecha_pago   DATE NOT NULL,
  monto_total  NUMBER(12,2) NOT NULL,
  metodo_pago  VARCHAR2(30),
  id_receta    NUMBER NOT NULL,
  id_banco     NUMBER
);

ALTER TABLE PAGO
  ADD CONSTRAINT pago_receta_fk 
  FOREIGN KEY (id_receta) 
  REFERENCES RECETA(cod_receta);

ALTER TABLE PAGO
  ADD CONSTRAINT pago_banco_fk 
  FOREIGN KEY (id_banco) 
  REFERENCES BANCO(cod_banco);

-- Validar métodos de pago
ALTER TABLE PAGO
  ADD CONSTRAINT pago_metodo_chk 
  CHECK (UPPER(metodo_pago) IN ('EFECTIVO','TARJETA','TRANSFERENCIA'));


-- ===========================================================
-- CASO 2: Evoluciones en PACIENTE
-- ===========================================================
ALTER TABLE PACIENTE
  DROP COLUMN edad;

ALTER TABLE PACIENTE
  ADD fecha_nacimiento DATE;
